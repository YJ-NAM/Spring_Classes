<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	DTD(Document Type Definition)
	- 작성한 문서가 어떤 문서인지에 대해서 정의해 놓은 것
	- 하나의 시스템 내에서 사용할 XML 데이터의 구조를 정의하여 유효성 점검 시 사용하는 태그	
 -->

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boarddao">
	<select id="count" resultType="int">
		select count(*) from board
	</select>
	<select id="list" parameterType="pagedto" resultType="boarddto">
		<![CDATA[select * 
				from (select b.*, row_number() over(order by board_no desc) rnum from board b) 
				where rnum >= #{startNo} and rnum <= #{endNo}]]>
	</select>
	<!-- 
		일반적으로 DB 작업을 하다 보면 먼저 사전에 어떤 값을 가져와서 해당 값을 증가시킨 후 입력하거나
		입력된 후에 증가값을 가져올 필요가 있는 경우가 발생할 수 있음
		이런 경우에는 MyBatis에서 제공하는 selectKey 태그를 이용하면 별도의 쿼리 로직을 사용할 필요 없이 일괄 처리 가능하게 됨
		keyProperty 속성 : 해당 결과값이 들어갈 DTO 객체의 멤버 변수명이 오면 됨
		order 속성 : 해당 쿼리문의 순서 의미
					- BEFORE : 원래 쿼리문 이전에 selectKey 태그가 실행됨
					- AFTER : 원래 쿼리문 이후에 selectKey 태그가 실행됨
		주의사항 : 반드시 멤버변수에 해당하는 setter()와 getter() 메서드가 존재해야 함
	 -->
	<insert id="add" parameterType="boarddto">
		<selectKey resultType="int" keyProperty="board_no" order="BEFORE">
			select max(board_no) from board
		</selectKey>
		insert into board values (#{ board_no } + 1, #{ board_writer }, #{ board_title }, 
		#{ board_cont }, #{ board_pwd }, default, sysdate, '')
	</insert>
	<select id="content" parameterType="int" resultType="boarddto">
		select * from board where board_no = #{ board_no }
	</select>
	<update id="read" parameterType="int">
		update board set board_hit = board_hit + 1 where board_no = #{ board_no }
	</update>
	<update id="modify" parameterType="boarddto">
		update board set board_title = #{ board_title }, board_cont = #{ board_cont }, board_update = sysdate where board_no = #{ board_no }
	</update>
	<delete id="delete" parameterType="int">
		delete from board where board_no = #{ no }
	</delete>
	<update id="seq" parameterType="int">
		update board set board_no = board_no - 1 where board_no > #{no}
	</update>
	
	<!-- 정보를 검색하는 쿼리문  -->
	<select id="allSearch_cnt" resultType="int">
        select count(*) from board where (board_title like '%'||#{ keyword }||'%') or (board_cont like '%'||#{ keyword }||'%') or (board_writer like '%'||#{ keyword }||'%')
    </select>	
    <select id="title_cnt" resultType="int">
        select count(*) from board where board_title like '%'||#{ keyword }||'%'
    </select>
    <select id="cont_cnt" resultType="int">
        select count(*) from board where board_cont like '%'||#{ keyword }||'%'
    </select>
    <select id="writer_cnt" resultType="int">
        select count(*) from board where board_writer like '%'||#{ keyword }||'%'
    </select>


    <!-- 정보를 검색하는 쿼리문  -->
    <select id="allSearch" parameterType="pagedto" resultType="boarddto">
        <![CDATA[select * from (select b.*, row_number() over(order by board_no desc) rnum from board b where (board_title like '%'||#{ keyword }||'%') or (board_cont like '%'||#{ keyword }||'%') or (board_writer like '%'||#{ keyword }||'%')) where rnum >= #{startNo} and rnum <= #{endNo}]]>
    </select>
    
    <select id="title" parameterType="pagedto" resultType="boarddto">
        <![CDATA[select * from (select b.*, row_number() over(order by board_no desc) rnum from board b where board_title like '%'||#{ keyword }||'%') where rnum >= #{startNo} and rnum <= #{endNo}]]>
    </select>

    <select id="cont" parameterType="pagedto" resultType="boarddto">
        <![CDATA[select * from (select b.*, row_number() over(order by board_no desc) rnum from board b where board_cont like '%'||#{ keyword }||'%') where rnum >= #{startNo} and rnum <= #{endNo}]]>
    </select>

    <select id="writer" parameterType="pagedto" resultType="boarddto">
        <![CDATA[select * from (select b.*, row_number() over(order by board_no desc) rnum from board b where board_writer like '%'||#{ keyword }||'%') where rnum >= #{startNo} and rnum <= #{endNo}]]>
    </select>
    
    
  	<!-- 검색어에 해당하는 record 수를 구하는 쿼리문 -->
  	<!-- 
	<select id="search_count" resultType="int">
		select count(*) from board 
		<choose>
			<when test="field.equals('all')">where board_title like '%'||#{ keyword }||'%'</when>
			<when test="field.equals('title')">where board_title like '%'||#{ keyword }||'%'</when>
			<when test="field.equals('writer')">where board_writer like '%'||#{ keyword }||'%'</when>
			<when test="field.equals('content')">where board_cont like '%'||#{ keyword }||'%'</when>
		</choose>
	</select>
	<select id="" parameterType="pagedto" resultType="boarddto" >
		select * from board 
		<choose>
			<when test="field.equals('all')">where (board_title like '%'||#{ keyword }||'%') or (board_cont like '%'||#{ keyword }||'%') or (board_writer like '%'||#{ keyword }||'%')</when>
			<when test="field.equals('title')">where board_title like '%'||#{ keyword }||'%'</when>
			<when test="field.equals('writer')">where board_writer like '%'||#{ keyword }||'%'</when>
			<when test="field.equals('content')">where board_cont like '%'||#{ keyword }||'%'</when>
		</choose>
		order by board_no desc
	</select> --> 
	
</mapper>